replication {
  akka {
    loglevel = "ERROR"
    loggers = ["akka.event.Logging$DefaultLogger"]
    logger-startup-timeout = 1s
    stdout-loglevel = "ERROR"
    log-config-on-start = off
    log-dead-letters = off
    jvm-exit-on-fatal-error = on
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
      deployment {
        /replication/dbrouter {
          router = round-robin
          nr-of-instances = 1
          # resizer {
          #   lower-bound = 1
          #   upper-bound = 2
          # }
        }
      }
    }
    cluster {
      retry-unsuccessful-join-after = off
       min-nr-of-members = 1
    }
    remote {
      startup-timeout = 10 s
      log-received-messages = off
      log-sent-messages = off
      log-frame-size-exceeding = off
      log-remote-lifecycle-events = off
      transport-failure-detector {
        heartbeat-interval = 1 s
        threshold = 7.0
        max-sample-size = 100
        min-std-deviation = 100 ms
        acceptable-heartbeat-pause = 3 s
      }
      enabled-transports = ["akka.remote.netty.tcp"]
      netty.tcp {
        hostname = "127.0.0.1"
        enable-ssl = false
        # Enables the TCP_NODELAY flag, i.e. disables Nagle’s algorithm
        tcp-nodelay = on
        # Enables TCP Keepalive, subject to the O/S kernel’s configuration
        tcp-keepalive = on
        maximum-frame-size = 128000k
        send-buffer-size = 256000k
        receive-buffer-size = 256000k
      }
    }
  }
  BaseX {
    weight = 1
    voting = on
  }
}